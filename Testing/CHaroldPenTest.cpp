#include "pch.h"
#include "CppUnitTest.h"
#include "Vector.h"
#include "HaroldPen.h"
#include <string>
#include "Game.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace std;
using namespace Gdiplus;


namespace Testing
{
	TEST_CLASS(CHaroldPenTest)
	{
	public:
		
		TEST_METHOD_INITIALIZE(methodName)
		{
			extern wchar_t g_dir[];
			::SetCurrentDirectory(g_dir);
		}

		TEST_METHOD(TestHaroldPenConstructor)
		{
			CGame game;
			CVector position(0.0f, 0.0f);
			CVector velocity(0.0f, 0.0f);
			CHaroldPen hPen(position, velocity, &game);
		}
		
		TEST_METHOD(TestPenSetAndMove)
		{
			CGame game;
			// testing base initialization
			CVector position(0.0f, 0.0f);
			CVector velocity(1.0f, 1.0f);
			CHaroldPen hPen(position, velocity, &game);
			Assert::IsTrue(hPen.GetPosition().X() == 0.0f && hPen.GetPosition().Y() == 0.0f, L"Testing starting location 0, 0");
			Assert::IsTrue(hPen.GetVelocity().X() == 1.0f && hPen.GetVelocity().Y() == 1.0f, L"Testing starting velocity 0, 0");

			// testing getters and setters
			CVector position2(2.0f, 3.0f);
			CVector velocity2(10.3f, 20.5f);
			hPen.SetLocation(position2);
			hPen.SetVelocity(velocity2);
			Assert::IsTrue(hPen.GetPosition().X() == 2.0f && hPen.GetPosition().Y() == 3.0f, L"Testing location at 2, 3");
			Assert::IsTrue(hPen.GetVelocity().X() == 10.3f && hPen.GetVelocity().Y() == 20.5f, L"Testing velocity at 10.3, 20.5");

			// testing update function
			hPen.SetLocation(position);
			hPen.SetVelocity(velocity);
			hPen.Update(20.0f); // move 20 seconds
			Assert::IsTrue(hPen.GetPosition().X() == 20.0f && hPen.GetPosition().Y() == 20.0f,
				L"Testing: starting location 0, 0 and moving 20 seconds at 1, 1 to position 20, 20");
			Assert::IsFalse(hPen.GetPosition().X() == 5.0f, L"Double checking that bad values return false");
		}
		
	};
}